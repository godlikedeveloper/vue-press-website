(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{240:function(e,n,r){"use strict";r.r(n);var o=r(2),s=Object(o.a)({},function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"axios防止多次点击请求生成多条数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#axios防止多次点击请求生成多条数据","aria-hidden":"true"}},[e._v("#")]),e._v(" axios防止多次点击请求生成多条数据")]),e._v(" "),r("h4",{attrs:{id:"思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#思路","aria-hidden":"true"}},[e._v("#")]),e._v(" 思路")]),e._v(" "),r("p",[e._v("定一个数组，请求时把"),r("code",[e._v("url")]),e._v("+"),r("code",[e._v("method")]),e._v("放入，以此判断唯一性，下一次请求验证是否是同个请求，是的话，执行"),r("code",[e._v("axios")]),e._v("的"),r("code",[e._v("cancel")]),e._v("方法,请求完了从数组里面清除该请求。")]),e._v(" "),r("h4",{attrs:{id:"code"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#code","aria-hidden":"true"}},[e._v("#")]),e._v(" code")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("//#region \n/**\n * 防止网络过慢时 发送重复请求\n * 在下一个请求未完成时 取消掉之后的重复请求\n */\n\nlet pending = []\nlet CancelToken = axios.CancelToken\nlet removePending = (config, f) => {\n  let flagUrl = config.url + '&' + config.method\n  console.log(pending)\n  console.log(flagUrl)\n  if (pending.indexOf(flagUrl) !== -1) {\n    if (f) {     \n     // console.log('--------romove request---------')\n      f() // 执行取消操作\n    } else {\n     // console.log('--------splice pending array---------')\n      pending.splice(pending.indexOf(flagUrl), 1)// 把这条记录从数组中移除\n    }\n  } else {\n    if (f) {\n    //  console.log('--------push pending array---------')\n      pending.push(flagUrl)\n    }\n  }\n}\n//#endregion\n\nconst service = axios.create({\n  //\t  baseURL: process.env.BASE_API, // api的base_url\n  //   timeout: 5000 // request timeout\n});\nservice.interceptors.request.use(\n  config => {\n    if ((config.method === 'post' && config.url && config.url.indexOf('survey/isUsed/')<0)\n      || config.method === 'put') {\n      //  console.log('--------request in---------')\n        config.cancelToken = new CancelToken((c) => {\n        removePending(config, c)\n      })\n    }\n    // Do something before request is sent\n   \n    return config;\n  },\n  error => {\n    // Do something with request error\n    console.log(error); // for debug\n    // Promise.reject(error);\n  }\n);\n/** 拦截器中统一处理错误提示*/\nservice.interceptors.response.use(\n  response => {\n    if (response.config.method === 'post' || response.config.method === 'put') {\n    //  console.log('--------response in------------')\n    // 这边 让splice pending 数组慢一点 防止请求过快 出现两条重复数据\n      setTimeout(() => {\n        removePending(response.config)\n      },500);     \n    }  //在一个ajax响应后再执行一下取消操作，把已经完成的请求从pending中移除\n    // Do something with response data\n   \n    return response;\n  },\n  error => {    \n  \n    // Do something with request error\n \n    return { data: {message:error.toString()} }; \n\n  }\n);\n\n")])])]),r("h4",{attrs:{id:"遇到的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#遇到的问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 遇到的问题")]),e._v(" "),r("p",[e._v("模拟慢网速是可以实现的，但是请求响应过快同样会放行。")]),e._v(" "),r("h4",{attrs:{id:"解决方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 解决方法")]),e._v(" "),r("p",[e._v("在请求响应之后，给清除该"),r("code",[e._v("url")]),e._v("的方法加"),r("code",[e._v("500ms")]),e._v("延迟，这样就可以解决，清除过快导致的判断失效问题。")])])},[],!1,null,null,null);n.default=s.exports}}]);