(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{237:function(n,a,e){"use strict";e.r(a);var t=e(2),l=Object(t.a)({},function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h3",{attrs:{id:"在vue中自己写的一个表单验证方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在vue中自己写的一个表单验证方法","aria-hidden":"true"}},[n._v("#")]),n._v(" 在vue中自己写的一个表单验证方法")]),n._v(" "),e("h4",{attrs:{id:"为什么要写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要写","aria-hidden":"true"}},[n._v("#")]),n._v(" 为什么要写")]),n._v(" "),e("p",[n._v("因为当时项目里要进行可定制化的验证")]),n._v(" "),e("h4",{attrs:{id:"用了策略模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用了策略模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 用了策略模式")]),n._v(" "),e("ol",[e("li",[n._v("第一步\n声明一个验证对象 需要验证的字段名为key 对应的value是数组 用来存放验证规则和对应的提示文字组成的对象\n声明一个存放提示的对象")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("infoDto:{\n    nameA:''\n}\n validate: {\n        name: [{ validator: val=>{return Boolean(val)}, msg: \"请输入名称\" }],\n         other:[]\n      }\n  warningText:{\n\n  }    \n    \n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[n._v("第二步，处理函数")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('   // 验证方法\n    checkNotNull(\n      val,\n      vali = {\n        dtoName: "infoDto",\n        warningTxtName: "warningText",\n        valiName: "validate" \n      },\n      focus\n    ) {\n      \n      let valiFlag = false; // 验证有问题->true\n      // 输入的值\n     \n      let dtoVal;\n\n      dtoVal = this[vali["dtoName"]][val];\n\n      // 验证规则数组\n      let validatorArr = this[vali["valiName"]][val];\n      // 循环验证\n      validatorArr &&\n        validatorArr.some((element, index) => {\n         \n          // 验证不正确，跳出\n          if (!element.validator(dtoVal)) {\n            //  debugger;\n            this.$set(this[vali["warningTxtName"]], val, element.msg);\n\n           \n            // 如果是非input元素 使用scrollIntoView定位 进行提示定位\n            if (document.getElementById(`${val}`) && focus === "focus") {\n             \n              document.getElementById(`${val}`).scrollIntoView();\n            }\n            // }\n            valiFlag = true;\n            return true;\n          }\n\n          if (index === validatorArr.length - 1) {\n            this.$set(this[vali["warningTxtName"]], val, "");\n          }\n        });\n      //  debugger\n      return valiFlag;\n    }\n\n')])])]),e("p",[n._v("参数包括对应的表单值的对象 上面的验证对象 以及存放提示数据的对象\n先根据参数传的所需验证的值的"),e("code",[n._v("name")]),n._v(" 找到其对应验证数组 再在表单对象里根据"),e("code",[n._v("name")]),n._v("找到"),e("code",[n._v("value")]),n._v(" 使用数组的"),e("code",[n._v("some")]),n._v("函数对"),e("code",[n._v("value")]),n._v("进行验证\n有问题的话 将对应提示文字塞到提示对象中去。")]),n._v(" "),e("p",[n._v("3.第三步 根据"),e("code",[n._v("warningText")]),n._v("里的值 加上错误的样式和文字")])])},[],!1,null,null,null);a.default=l.exports}}]);